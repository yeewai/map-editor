'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _enzyme2 = _interopRequireDefault(_enzyme);

var _enzymeAdapterReact = require('enzyme-adapter-react-16');

var _enzymeAdapterReact2 = _interopRequireDefault(_enzymeAdapterReact);

var _reduxMockStore = require('redux-mock-store');

var _reduxMockStore2 = _interopRequireDefault(_reduxMockStore);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _reactModal = require('react-modal');

var _reactModal2 = _interopRequireDefault(_reactModal);

var _reactDom = require('react-dom');

var _ = require('./');

var _2 = _interopRequireDefault(_);

var _index = require('../index');

var _reduxForm = require('redux-form');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var mockStore = (0, _reduxMockStore2.default)();
_enzyme2.default.configure({ adapter: new _enzymeAdapterReact2.default() });

describe("Generic Modal", function () {
    it('should close', function () {
        var dispatchSpy = _sinon2.default.spy();

        var _mapDispatchToProps = (0, _.mapDispatchToProps)(dispatchSpy),
            closeModal = _mapDispatchToProps.closeModal;

        closeModal();
        var expectedAction = _index.modalActions.hideModal();
        var spyLastCall = dispatchSpy.args[0][0];

        expect(spyLastCall.type).toBe(expectedAction.type);
        expect(spyLastCall.type).toBeDefined();
    });

    var renderModalAndClickClose = function renderModalAndClickClose(store, modalType) {
        store.dispatch = _sinon2.default.spy();
        var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { modalType: modalType, store: store, contentLabel: 'b', unsaved_form_warning: '' }));

        // react-modal doesn't attaches the modal to the root of the document so we can't find it with enzyme
        var portalWrapper = wrapper.find('ModalPortal');
        portalWrapper.find('.close').simulate('click');
    };

    it('renders children when modal is open and closes if "x" is clicked', function () {
        var store = mockStore({
            modals: {
                "a": {
                    visible: true,
                    modalProps: {}
                }
            }
        });
        renderModalAndClickClose(store, "a");

        expect(store.dispatch.called).toBe(true);
    });

    it('needs to confirm before closing modal if there is a dirty form inside', function () {
        var store = mockStore({
            modals: {
                "a": {
                    visible: true,
                    modalProps: { formName: "Some Form" }
                }
            },
            form: _defineProperty({}, "Some Form", {
                initial: { "a": 0 },
                values: { "a": 1 }
            }),
            program: { item: { app_copy: {} } }
        });
        renderModalAndClickClose(store, "a");

        expect(store.dispatch.args[0][0]).toMatchObject({ "modalType": "CONFIRM_MODAL", "type": "modal/SHOW" });
        expect(store.dispatch.args[1]).not.toBeDefined();
        store.dispatch.args[0][0].modalProps.onSuccess();
        expect(store.dispatch.args[1][0]).toMatchObject({ "modalType": undefined, "type": "modal/HIDE" });
    });

    it('closes if there is a form, but it is pristine', function () {
        var store = mockStore({
            modals: {
                "a": {
                    visible: true,
                    modalProps: { formName: "Some Form" }
                }
            },
            program: { item: { app_copy: {} } }
        });
        renderModalAndClickClose(store, "a");

        expect(store.dispatch.called).toBe(true);
    });
});