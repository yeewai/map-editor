'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.mapDispatchToProps = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactModal = require('react-modal');

var _reactModal2 = _interopRequireDefault(_reactModal);

var _reactRedux = require('react-redux');

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _index = require('../index');

var _reactDom = require('react-dom');

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var EverModal = function EverModal(_ref) {
    var isOpen = _ref.isOpen,
        children = _ref.children,
        contentLabel = _ref.contentLabel,
        closeModal = _ref.closeModal,
        dirtyFormExists = _ref.dirtyFormExists,
        _ref$unsaved_form_war = _ref.unsaved_form_warning,
        unsaved_form_warning = _ref$unsaved_form_war === undefined ? "There are unsaved changes. Are you sure you want to leave?" : _ref$unsaved_form_war,
        isConfirm = _ref.isConfirm,
        className = _ref.className,
        modalType = _ref.modalType;

    var closeModalDirty = function closeModalDirty() {
        return closeModal(modalType, dirtyFormExists, unsaved_form_warning);
    };
    var appElement = (0, _jquery2.default)('#root').get(0) || (0, _jquery2.default)('<div />').get(0); // tells screenreader which div to ignore when modal is open
    return _react2.default.createElement(
        _reactModal2.default,
        { appElement: appElement, isOpen: isOpen, contentLabel: contentLabel, onRequestClose: closeModalDirty,
            className: (0, _classnames3.default)('Modal__Bootstrap', 'modal-dialog', _defineProperty({
                "confirm-modal": isConfirm
            }, className, !!className)),
            closeTimeoutMS: 150
        },
        _react2.default.createElement(
            'div',
            { role: 'document' },
            _react2.default.createElement(
                'div',
                { className: 'modal-content' },
                _react2.default.createElement(
                    'div',
                    { className: 'modal-close-container' },
                    _react2.default.createElement(
                        'button',
                        { onClick: closeModalDirty, className: 'close', 'data-dismiss': 'modal', 'aria-label': 'Close' },
                        _react2.default.createElement(
                            'span',
                            { 'aria-hidden': 'true' },
                            '\xD7'
                        )
                    )
                ),
                children
            )
        )
    );
};

var mapStateToProps = function mapStateToProps(state, ownProps) {
    return {
        isOpen: _index.modalSelectors.isOpen(state, ownProps.modalType),
        dirtyFormExists: _index.modalSelectors.dirtyFormExists(state, ownProps.modalType),
        isConfirm: _index.modalSelectors.isConfirm(state, ownProps.modalType),
        children: ownProps.children
    };
};

var mapDispatchToProps = exports.mapDispatchToProps = function mapDispatchToProps(dispatch) {
    return {
        closeModal: function closeModal(modalType, dirtyFormExists, message) {
            if (dirtyFormExists) {
                dispatch(_index.modalActions.showModal("CONFIRM_MODAL", {
                    message: message,
                    onSuccess: function onSuccess() {
                        dispatch(_index.modalActions.hideModal());
                    },
                    ariaLabel: message
                }));
                //dispatch(actions.ui.hideInPlaceEditableForm(formName));
            } else {
                dispatch(_index.modalActions.hideModal(modalType));
            }
        }
    };
};
exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(EverModal);