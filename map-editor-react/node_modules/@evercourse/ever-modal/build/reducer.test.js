"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _reducer = require("./reducer");

var _reducer2 = _interopRequireDefault(_reducer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

describe("Reducers/modal", function () {
    it("renders the initial state", function () {
        expect((0, _reducer2.default)(undefined, {})).toEqual(_reducer.defaultState);
    });

    it("handles showing the modal", function () {
        var modalAction = {
            modalType: "a",
            modalProps: { a: 1 }
        };

        var modalState = _defineProperty({}, modalAction.modalType, {
            visible: true,
            modalProps: modalAction.modalProps
        });

        expect((0, _reducer2.default)({}, _extends({ type: "modal/SHOW" }, modalAction))).toEqual(modalState);
    });

    it("handles hiding modal", function () {
        expect((0, _reducer2.default)({}, { type: "modal/HIDE" })).toEqual(_reducer.defaultState);
    });

    it("handles hiding a specific modal", function () {
        expect((0, _reducer2.default)({ sup: { visible: true } }, { type: "modal/HIDE", modalType: "sup" })).toEqual({ sup: { visible: false } });
    });
});