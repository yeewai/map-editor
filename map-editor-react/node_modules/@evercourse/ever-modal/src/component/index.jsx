import React from 'react';
import ReactModal from 'react-modal';
import { connect } from 'react-redux';
import classnames from 'classnames';
import { modalActions, modalSelectors } from '../index';
import { findDOMNode } from 'react-dom';
import $ from 'jquery';

const EverModal = ({isOpen, children, contentLabel, closeModal, dirtyFormExists, unsaved_form_warning="There are unsaved changes. Are you sure you want to leave?", isConfirm, className, modalType}) => {
    const closeModalDirty = () =>{ return closeModal(modalType, dirtyFormExists, unsaved_form_warning )};
    const appElement = $('#root').get(0) || $('<div />').get(0); // tells screenreader which div to ignore when modal is open
    return (
        <ReactModal appElement={appElement} isOpen={isOpen} contentLabel={contentLabel} onRequestClose={closeModalDirty}
          className={classnames('Modal__Bootstrap', 'modal-dialog', {
              "confirm-modal": isConfirm,
              [className]: !!className
          })}
          closeTimeoutMS={150}
        >
            <div role="document">
            <div className="modal-content">
                <div className="modal-close-container">
                    <button onClick={closeModalDirty} className="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                {children}
            </div>
        </div>
        </ReactModal>
    );
};

const mapStateToProps = (state, ownProps) => ({
    isOpen: modalSelectors.isOpen(state, ownProps.modalType),
    dirtyFormExists: modalSelectors.dirtyFormExists(state, ownProps.modalType),
    isConfirm: modalSelectors.isConfirm(state, ownProps.modalType),
    children: ownProps.children
});

export const mapDispatchToProps = dispatch => ({
    closeModal: (modalType, dirtyFormExists, message) => {
        if (dirtyFormExists) {
            dispatch(modalActions.showModal("CONFIRM_MODAL", {
                message: message,
                onSuccess: () => { dispatch(modalActions.hideModal()); },
                ariaLabel: message
            }))
            //dispatch(actions.ui.hideInPlaceEditableForm(formName));
        } else {
            dispatch(modalActions.hideModal(modalType));
        }
    }
});
export default connect(mapStateToProps, mapDispatchToProps)(EverModal);
